<modification>
	<id>Ajax Shopping Cart - Ocjoy</id>
	<version>1.0</version>
	<vqmver>1.1.0</vqmver>
	<author>Ocjoy</author>
	<file name="catalog/model/catalog/product.php">
		<operation>
			<search position="before"><![CDATA[public function getTotalProductSpecials() {]]></search>
			<add><![CDATA[public function getAjaxcartProducts($data = array()) {
		$type_pr = (int)$this->config->get('config_type_ap');
				
		if ($type_pr == 1) {

				if ($this->customer->isLogged()) {
					$customer_group_id = $this->customer->getCustomerGroupId();
				} else {
					$customer_group_id = $this->config->get('config_customer_group_id');
				}	
				
				$product_data = array();
				
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_to_category WHERE category_id = '" . (int)$this->config->get('config_parent_id') . "'");
				
				foreach ($query->rows as $result) { 		
					$product_data[$result['product_id']] = $this->getProduct($result['product_id']);
				}
							 	 		
				return $product_data;
			
		} elseif ($type_pr == 2) {
			
				$product_data = array();
				
				$query = $this->db->query("SELECT p.product_id FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' ORDER BY p.viewed, p.date_added DESC LIMIT 50");
				
				foreach ($query->rows as $result) { 		
					$product_data[$result['product_id']] = $this->getProduct($result['product_id']);
				}
							 	 		
				return $product_data;
			
		} elseif ($type_pr == 3) {
			
				if ($this->customer->isLogged()) {
					$customer_group_id = $this->customer->getCustomerGroupId();
				} else {
					$customer_group_id = $this->config->get('config_customer_group_id');
				}	
						
				$sql = "SELECT DISTINCT ps.product_id, (SELECT AVG(rating) FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = ps.product_id AND r1.status = '1' GROUP BY r1.product_id) AS rating FROM " . DB_PREFIX . "product_special ps LEFT JOIN " . DB_PREFIX . "product p ON (ps.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' AND ps.customer_group_id = '" . (int)$customer_group_id . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) GROUP BY ps.product_id";

				$sort_data = array(
					'pd.name',
					'p.model',
					'ps.price',
					'rating',
					'p.sort_order'
				);
				
				if (isset($data['sort']) && in_array($data['sort'], $sort_data)) {
					if ($data['sort'] == 'pd.name' || $data['sort'] == 'p.model') {
						$sql .= " ORDER BY LCASE(" . $data['sort'] . ")";
					} else {
						$sql .= " ORDER BY " . $data['sort'];
					}
				} else {
					$sql .= " ORDER BY p.sort_order";	
				}
				
				if (isset($data['order']) && ($data['order'] == 'DESC')) {
					$sql .= " DESC, LCASE(pd.name) DESC";
				} else {
					$sql .= " ASC, LCASE(pd.name) ASC";
				}
			
				if (isset($data['start']) || isset($data['limit'])) {
					if ($data['start'] < 0) {
						$data['start'] = 0;
					}				

					//if ($data['limit'] < 1) {
						$data['limit'] = 20;
					//}	
				
					$sql .= " LIMIT " . (int)$data['start'] . "," . (int)$data['limit'];
				}

				$product_data = array();
				
				$query = $this->db->query($sql);
				
				foreach ($query->rows as $result) { 		
					$product_data[$result['product_id']] = $this->getProduct($result['product_id']);
				}
				
				return $product_data;
			
		} elseif ($type_pr == 4) {
			
				if ($this->customer->isLogged()) {
					$customer_group_id = $this->customer->getCustomerGroupId();
				} else {
					$customer_group_id = $this->config->get('config_customer_group_id');
				}	
						
				$product_data = $this->cache->get('product.bestseller.' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id'). '.' . $customer_group_id . '.' . '50');

				if (!$product_data) { 
					$product_data = array();
					
					$query = $this->db->query("SELECT op.product_id, COUNT(*) AS total FROM " . DB_PREFIX . "order_product op LEFT JOIN `" . DB_PREFIX . "order` o ON (op.order_id = o.order_id) LEFT JOIN `" . DB_PREFIX . "product` p ON (op.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE o.order_status_id > '0' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' GROUP BY op.product_id ORDER BY total DESC LIMIT 50");
					
					foreach ($query->rows as $result) { 		
						$product_data[$result['product_id']] = $this->getProduct($result['product_id']);
					}
					
					$this->cache->set('product.bestseller.' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id'). '.' . $customer_group_id . '.' . '50', $product_data);
				}
				
				return $product_data;
			
		} elseif ($type_pr == 5) {
			
				if ($this->customer->isLogged()) {
					$customer_group_id = $this->customer->getCustomerGroupId();
				} else {
					$customer_group_id = $this->config->get('config_customer_group_id');
				}	
						
				$product_data = $this->cache->get('product.latest.' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id') . '.' . $customer_group_id . '.' . '50');

				if (!$product_data) { 
					$query = $this->db->query("SELECT p.product_id FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' ORDER BY p.date_added DESC LIMIT 50");
				 	 
					foreach ($query->rows as $result) {
						$product_data[$result['product_id']] = $this->getProduct($result['product_id']);
					}
					
					$this->cache->set('product.latest.' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id'). '.' . $customer_group_id . '.' . '50', $product_data);
				}
				
				return $product_data;
		}
}]]></add>
		</operation>
	</file>
	<file name="catalog/view/theme/*/template/common/header.tpl">
		<operation>
			<search position="before"><![CDATA[</head>]]></search>
			<add><![CDATA[
				
				<script type="text/javascript" src="catalog/view/javascript/jquery/colorbox/jquery.colorbox.js" async></script>
				
			]]></add>
		</operation>
	</file>
</modification>
